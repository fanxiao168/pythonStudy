'''
    python语言基础
        1.程序运行过程
        源代码--> 编译 --> 字节码 ---> 解释 ---> 机器码
        |----- 1次 ------|
        |---------------- 运行时 ------------------|

        2.pycharm常用快捷键(百度搜索)
        https://blog.csdn.net/chenyaoo/article/details/79645035

        3.python内存管理
            引用计数：
                定义：每个对象存储被引用的次数，如果数量为零，则'销毁'
                     （不被使用的对象，即为可回收）
                缺点：存在循环引用的现象
            标记清除:
                定义：在内存容量不够时,从栈帧中开始扫描内存，标记正在使用的对象。
                     （不被使用的对象，即为可回收）
                缺点:扫描耗时长
            分代回收：
                定义:根据回收频次将内存分为多个区域('青年代'，'中年代','老年代')
                避免每次扫描时范围过大
            优化:
                尽少产生垃圾，对象池(小整数对象池/字符串池...),手动回收(慎重)

        4. 容器
            种类：字符串（自存字符串编码值）/列表(预留空间)/ 元组（按需分配）/字典（单个元素读写速度最快）/ 集合（不重复/数字运算）
            内存图：.....
            通用操作：+  *  比较  in   索引/切片

        5. 函数
            设计原则：单一职责
            参数：
                实参 ----  调用时
                    位置参数 （1，2，3）
                        序列实参（*[1,2,3]） 备注：拆
                    关键字实参 （a = 1, b = 2）
                        字典关键字实参(**{'a':1,'b':2}) 备注：拆

                形参 -- 定义时
                    默认形参（a = 1,b = ''）
                    位置形参（a,b）
                        星号元组形参(*args) 备注：合
                    命名关键字形参(*,b) (*args,b)
                        双星号字典形参(**kwargs) 备注：合

                万能参数(*args,**kwargs)
'''

# 3. 内存管理
# 循环拼接字符串
# str_result = ''
# for i in range(100):
# 两个字符串拼接后产生新字符串，替换str_result存储的引用后，产生垃圾
#   str_result = str_result + str(i)


list_result = []
for i in range(100):
    list_result.append(str(i))

str_result = ''.join(list_result)
print(str_result)

# 4.容器
list01 = [3, 4, 54, 6, 7]
# 切片获取数据是创建新列表（拷贝原始数据）
list02 = list01[1:4]
list02[0] = 'qtx'
print(list01)

# 切片修改数据时不创建新列表
list01[1:4] = ['qtx']
print(list01)
